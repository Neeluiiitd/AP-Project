package com.example.game3;

import javafx.animation.AnimationTimer;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;

import java.net.URL;
import java.util.*;

public class Controller implements Initializable {
    @FXML
    public ImageView runner;
    AnimationTimer gameLoop;
    MediaPlayer mediaPlayer;

    @FXML
    private AnchorPane plane;

    @FXML
    private Text score;
    private double stickLength = 0;
    private Rectangle currentStick;

    double rectangle1StartX = 0;
    double rectangle1EndX = 90;
    double rectangle2StartX = 200;

    double rectangle2EndX = 280;
    double rectangle3StartX = 350;
    double rectangle3EndX = 470;

    double rectangle4StartX = 500;
    double rectangle4EndX = 590;


    private int scoreCounter = 0;
    private boolean[] scoreUpdated = new boolean[4];
    private Player player; // Declare a player instance



    private Map<KeyCode, Long> keyPressTimeMap = new HashMap<>();

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {

        // Add 4 rectangles to the bottom of the screen
        addRectangleWithDot(0, 400, 90, 100, Color.BLACK);
        addRectangleWithDot(200, 400, 80, 100, Color.BLACK);
        addRectangleWithDot(350, 400, 120, 100, Color.BLACK);
        addRectangleWithDot(500, 400, 90, 100, Color.BLACK);
        player = new Player(runner, rectangle1StartX, 290);

        gameLoop = new AnimationTimer() {
            @Override
            public void handle(long l) {
                update();
            }
        };

        gameLoop.start();
        playMusic();
    }

    private void playMusic() {
        String musicPath = "music.mp3";

        // Create a Media object
        Media media = new Media(getClass().getResource("/" + musicPath).toExternalForm());
        mediaPlayer = new MediaPlayer(media);
        mediaPlayer.setCycleCount(MediaPlayer.INDEFINITE);
        mediaPlayer.play();
    }

    private void update() {
        double playerX = runner.getLayoutX();

        // Flag to check if the player is inside any rectangle
        boolean playerInsideRectangle = false;

        // Iterate through all rectangles and check conditions
        for (int i = 0; i < 4; i++) {
            double startX = 0;
            double endX = 0;

            switch (i) {
                case 0:
                    startX = rectangle1StartX;
                    endX = rectangle1EndX;
                    break;
                case 1:
                    startX = rectangle2StartX;
                    endX = rectangle2EndX;
                    break;
                case 2:
                    startX = rectangle3StartX;
                    endX = rectangle3EndX;
                    break;
                case 3:
                    startX = rectangle4StartX;
                    endX = rectangle4EndX;
                    break;
            }

            // Check if player is within the X range of the rectangle
            if (playerX > startX && playerX < endX) {
                playerInsideRectangle = true;

                // Check if the score has not been updated for this rectangle
                if (!scoreUpdated[i]) {
                    // Check for the corresponding rectangle's red dot
                    checkRedDot(i);

                    // Set the flag to true to prevent further score updates in this rectangle
                    scoreUpdated[i] = true;

                    // Increment the scoreCounter by 10 when the player crosses a red cherry
                    scoreCounter += 10;
                    score.setText("Total " + scoreCounter);
                }
            }
        }

        // Reset the scoreUpdated flag if the player is not inside any rectangle
        if (!playerInsideRectangle) {
            Arrays.fill(scoreUpdated, false);
        }
    }



    private void checkRedDot(int rectangleIndex) {
        // Assuming that the rectangles and red dots are added in pairs
        Node node = plane.getChildren().get(rectangleIndex * 2);
        if (node instanceof Rectangle) {
            Rectangle rectangle = (Rectangle) node;
            Rectangle redDot = (Rectangle) plane.getChildren().get(rectangleIndex * 2 + 1);

            double playerY = runner.getLayoutY();
            double redDotY = redDot.getY();

            // Check if the player's position is near the red dot in the specific rectangle
            if (playerY <= redDotY + 10 && playerY >= redDotY - 10 && !scoreUpdated[rectangleIndex]) {
                // Increment the score counter by 10
                scoreCounter += 10;
                score.setText("Total " + scoreCounter);
                scoreUpdated[rectangleIndex] = true;
            }
        }
    }




    @FXML
    void pressed(KeyEvent event) {
        if (event.getCode() == KeyCode.SPACE) {
            stickLength += 10; // Increase stick length by 10 units
            currentStick = createAndAddRectangle(player.getX() + player.getImageView().getFitWidth() / 2, 400, stickLength, 5, Color.BLUE);

            // Print the updated position of the runner
            System.out.println("Runner X: " + runner.getLayoutX());
            System.out.println("Runner Y: " + runner.getLayoutY());
        }
    }

    @FXML
    void released(KeyEvent event) {
        if (event.getCode() == KeyCode.SPACE) {
            // Remove the old stick after releasing the space key
            removeStick();

            // Translate the player to a new position
            double newPlayerX = player.getX() + stickLength + 10; // Adjust the value as needed
            player.setX(newPlayerX);

            // Print the updated position of the player
            System.out.println("Player X: " + player.getX());
            System.out.println("Player Y: " + player.getY());
        }
    }

    private void removeStick() {
        if (currentStick != null && plane.getChildren().contains(currentStick)) {
            plane.getChildren().remove(currentStick);
            stickLength = 0;
            currentStick = null;
        }
    }

    private Rectangle createAndAddRectangle(double x, double y, double width, double height, Color color) {
        Rectangle rectangle = new Rectangle(x, y, width, height);
        rectangle.setFill(color);
        plane.getChildren().add(rectangle);
        return rectangle;
    }

    private void addRectangleWithDot(double x, double y, double width, double height, Color color) {
        createAndAddRectangle(x, y, width, height, color);

        // Add a dot at the top of the rectangle
        Rectangle dot = new Rectangle(x + width / 2 - 2, y - 2, 10, 10);
        dot.setFill(Color.RED);
        plane.getChildren().add(dot);
    }
}
