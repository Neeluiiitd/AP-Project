
package com.example.game3;

import javafx.animation.AnimationTimer;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.stage.Stage;

import java.io.IOException;
import java.net.URL;
import java.util.*;

public class Controller implements Initializable {
    @FXML
    public ImageView runner;
    AnimationTimer gameLoop;
    MediaPlayer mediaPlayer;
    private boolean gameOverDisplayed = false;


    @FXML
    private AnchorPane plane;

    @FXML
    private Text score;
    private double stickLength = 0;
    private Rectangle currentStick;

    double rectangle1StartX = 0;
    double rectangle1EndX = 120;
    double rectangle2StartX = 250;
    double rectangle2EndX = 370;
    double rectangle3StartX = 500;
    double rectangle3EndX = 620;
    double redDot1StartY;
    double redDot1EndY;
    double redDot2StartY;
    double redDot2EndY;
    double redDot3StartY;
    double redDot3EndY;


    private int scoreCounter = 0;
    private boolean[] scoreUpdated = new boolean[3];
    private Player player; // Declare a player instance

    private Map<KeyCode, Long> keyPressTimeMap = new HashMap<>();
    private List<Rectangle> redDots = new ArrayList<>();
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        // Add 4 rectangles to the bottom of the screen
        // Add 3 rectangles to the bottom of the screen
        addRectangle(rectangle1StartX, 400, 50, 200, Color.BLACK);
        addRectangle(rectangle2StartX, 400, 30, 200, Color.BLACK);
        addRectangle(rectangle3StartX, 400, 70, 200, Color.BLACK);


        // we can use inheritance in cherry class
        Rectangle redDot1 = addRectangleCherry(rectangle1EndX + 30, 420, 10, 10, Color.RED);
        Rectangle redDot2 = addRectangleCherry(rectangle2EndX + 40, 420, 10, 10, Color.RED);
        Rectangle redDot3 = addRectangleCherry(rectangle3EndX + 60, 420, 10, 10, Color.RED);


        // Add red dots to the list
        redDots.add(redDot1);
        redDots.add(redDot2);
        redDots.add(redDot3);


        player = new Player(runner, rectangle1StartX, 345);

        rectangle1StartX = rectangle1EndX + 30;
        rectangle1EndX = rectangle1StartX + 10;

        rectangle2StartX = rectangle2EndX + 40;
        rectangle2EndX = rectangle2StartX + 10;

        rectangle3StartX = rectangle3EndX + 60;
        rectangle3EndX = rectangle3StartX + 10;

        double redDot1StartY = redDot1.getY();
        double redDot1EndY = redDot1StartY + redDot1.getHeight();

        double redDot2StartY = redDot2.getY();
        double redDot2EndY = redDot2StartY + redDot2.getHeight();

        double redDot3StartY = redDot3.getY();
        double redDot3EndY = redDot3StartY + redDot3.getHeight();


        gameLoop = new AnimationTimer() {
            @Override
            public void handle(long l) {
                update();
            }
        };

        gameLoop.start();
        playMusic();
    }

    private void addRectangle(double x, double y, double width, double height, Color color) {
        createAndAddRectangle(x, y, width, height, color);
    }

    private Rectangle addRectangleCherry(double x, double y, double width, double height, Color color) {
        return createAndAddRectangle(x, y, width, height, color);
    }

    private void playMusic() {
        String musicPath = "music.mp3";

        // Create a Media object
        Media media = new Media(getClass().getResource("/" + musicPath).toExternalForm());
        mediaPlayer = new MediaPlayer(media);
        mediaPlayer.setCycleCount(MediaPlayer.INDEFINITE);
        mediaPlayer.play();
    }

    private void update() {
        double playerX = runner.getLayoutX();
        double playerY = runner.getLayoutY();

        // Flag to check if the player is inside any rectangle
        boolean playerInsideRectangle = false;

        // Iterate through all rectangles and check conditions
        for (int i = 0; i < 3; i++) {
            double startX = 0;
            double endX = 0;
            double startY = 0;
            double endY = 0;

            List<Double> redDotStartYList = Arrays.asList(redDot1StartY, redDot2StartY, redDot3StartY);
            List<Double> redDotEndYList = Arrays.asList(redDot1EndY, redDot2EndY, redDot3EndY);

            switch (i) {
                case 0:
                    startX = rectangle1StartX;
                    endX = rectangle1EndX;
                    startY = redDotStartYList.get(i);
                    endY =redDotEndYList.get(i);
                    break;
                case 1:
                    startX = rectangle2StartX;
                    endX = rectangle2EndX;
                    startY = redDotStartYList.get(i);
                    endY = redDotEndYList.get(i);
                    break;
                case 2:
                    startX = rectangle3StartX;
                    endX = rectangle3EndX;
                    startY = redDotStartYList.get(i);
                    endY = redDotEndYList.get(i);
                    break;
            }

            // Check if player is within the X range of the rectangle
            if (isPointInsideRectangle(playerX, playerY, startX, startY, endX, endY)) {
                System.out.println("Yes2");
                playerInsideRectangle = true;

                // Check if the score has not been updated for this rectangle
                if (!scoreUpdated[i]) {

                    checkRedDot(i, redDots);

                    // Set the flag to true to prevent further score updates in this rectangle
                    scoreUpdated[i] = true;

                    // Increment the scoreCounter by 10 when the player crosses a red cherry
                    score.setText("Total " + scoreCounter);
                }
            }
        }

        // Reset the scoreUpdated flag if the player is not inside any rectangle
        if (!playerInsideRectangle) {
            Arrays.fill(scoreUpdated, false);
        }

        checkPlayerCollision();
    }

    private static boolean isPointInsideRectangle(double x, double y, double x1, double y1, double x2, double y2) {
        return x >= x1 && y >= y1 && x >= x2 && y >= y2;
    }
    private void checkRedDot(int rectangleIndex, List<Rectangle> dots) {
        // Retrieve the corresponding red or blue dot based on the rectangle index
        Rectangle dot = dots.get(rectangleIndex);

        double playerX = runner.getLayoutX();
        double playerY = runner.getLayoutY();
        double playerWidth = runner.getFitWidth();
        double playerHeight = runner.getFitHeight();

        double dotX = dot.getX();
        double dotY = dot.getY();
        double dotWidth = dot.getWidth();
        double dotHeight = dot.getHeight();

        // Check if the dot's position is within the player's bounding box
        if (!scoreUpdated[rectangleIndex]) {
            if ((dotX >= playerX && dotX <= playerX + playerWidth) ||
                    (dotX + dotWidth >= playerX && dotX + dotWidth <= playerX + playerWidth)) {
                if ((dotY >= playerY && dotY <= playerY + playerHeight) ||
                        (dotY + dotHeight >= playerY && dotY + dotHeight <= playerY + playerHeight)) {
                    if (dot.getFill() == Color.RED && isPlayerFlipped){
                        scoreCounter += 10;
                    }
                    score.setText("Total " + scoreCounter);
                    scoreUpdated[rectangleIndex] = true;
                    System.out.println("Printing2");
                }
            }
        }
    }

    private boolean isPlayerFlipped = false;

    @FXML
    void pressed(KeyEvent event) {
        if (event.getCode() == KeyCode.SPACE) {
            stickLength += 10; // Increase stick length by 10 units
            currentStick = createAndAddRectangle(player.getX() + player.getImageView().getFitWidth() / 2, 400, stickLength, 3, Color.GREY);

            createAndAddRectangle(player.getX() + player.getImageView().getFitWidth() / 2, 400, stickLength, 3, Color.GREY);

            // Print the updated position of the runner
            System.out.println("Runner X: " + runner.getLayoutX());
            System.out.println("Runner Y: " + runner.getLayoutY());
        } else if (event.getCode() == KeyCode.D) {
            // Handle the "D" key press to flip the player by 180 degrees
            togglePlayerFlip();
        }
    }

    private void togglePlayerFlip() {
        // Toggle the flip state
        isPlayerFlipped = !isPlayerFlipped;

        // Flip the player by 180 degrees based on the flip state
        runner.setScaleY(isPlayerFlipped ? -1 : 1);

        // Adjust the player's position based on the flip state
        double playerY = isPlayerFlipped ? (400 + 5) : 345; // Adjust these values as needed
        System.out.println("After flip Y"+playerY);
        player.setY(playerY);
    }

    @FXML
    void released(KeyEvent event) {
        if (event.getCode() == KeyCode.SPACE) {
            // Remove the old stick after releasing the space key
            removeStick();

            // Translate the player to a new position
            double newPlayerX = player.getX() + stickLength + 10; // Adjust the value as needed
            player.setX(newPlayerX);

            // Print the updated position of the player
            System.out.println("Player X: " + player.getX());
            System.out.println("Player Y: " + player.getY());
        }
    }

    private void removeStick() {
        if (currentStick != null && plane.getChildren().contains(currentStick)) {
            plane.getChildren().remove(currentStick);
            stickLength = 0;
            currentStick = null;
        }
    }

    private Rectangle createAndAddRectangle(double x, double y, double width, double height, Color color) {
        Rectangle rectangle = new Rectangle(x, y, width, height);
        rectangle.setFill(color);
        plane.getChildren().add(rectangle);
        return rectangle;
    }

    private void checkPlayerCollision() {
        double playerX = runner.getLayoutX();
        double playerY = runner.getLayoutY();


        // Check for collision with black rectangles
        if (playerY >= 400) { // *** THE MAIN ISSUE ****
            handleBlackRectangleCollision();
            if (isPlayerFlipped && !gameOverDisplayed){
                showGameOverScreen();
                gameOverDisplayed = true;
            }
        }
    }

    private void handleBlackRectangleCollision() {
        // Implement the logic for black rectangle collision
        // This could involve opening a new blank screen or any other action.
        System.out.println("Collision with black rectangle!");
    }

    private void showGameOverScreen() {
        try {
            // Load the GameOver.fxml file
            FXMLLoader loader = new FXMLLoader(getClass().getResource("GameOver.fxml"));
            Parent root = loader.load();

            // Create a new stage (window) for the Game Over screen
            Stage stage = new Stage();
            stage.setTitle("Game Over");
            stage.setScene(new Scene(root, 600, 400));

            // Show the stage
            stage.show();

            // Close the current stage (you may need to modify this based on your application's structure)
            Stage currentStage = (Stage) plane.getScene().getWindow();
            currentStage.close();
        } catch (IOException e) {
            e.printStackTrace();
            // Handle the exception as needed
        }

    }}
